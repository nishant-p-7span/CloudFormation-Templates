AWSTemplateFormatVersion: '2010-09-09'
Description: The template used to create an ECS Cluster from the ECS Console.
Parameters:
  ECSClusterName:
    Type: String
    Description: Specifies the ECS Cluster Name with which the resources would be associated
    Default: test1node-cluster
  LatestECSOptimizedAMI:
    Description: AMI ID
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2/kernel-5.10/recommended/image_id
  ImageURI:
    Type: String
    Description: ECR Image URI.
  ExecutionRoleArn:
    Type: String
    Description: ARN of the task execution role
    Default: 'arn:aws:iam::XXXXXXXXXX:role/ecsTaskExecutionRole'
  ECSServiceName:
    Type: String
    Default: 
  SecurityGroupIDs:
    Type: CommaDelimitedList
    Default: 
  SubnetIDs:
    Type: CommaDelimitedList
    Default: 
  VpcID:
    Type: String
    Default: 
  LoadBalancerName:
    Type: String
    Default: test2alb
  HostedZone:
    Type: String
    Default: ''

Resources:
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref ECSClusterName
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      ClusterSettings:
        - Name: containerInsights
          Value: disabled
      Configuration:
        ExecuteCommandConfiguration:
          Logging: DEFAULT
      ServiceConnectDefaults:
        Namespace: test1node-cluster
      Tags: []
  
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: test2-node
      RequiresCompatibilities:
        - FARGATE
      Cpu:  1024
      Memory: 3072
      ExecutionRoleArn: !Ref ExecutionRoleArn
      NetworkMode: awsvpc
      RuntimePlatform:
        CpuArchitecture:  X86_64
        OperatingSystemFamily:  LINUX
      ContainerDefinitions:
        - Name: test2image
          Image: !Ref ImageURI
          PortMappings:
            - ContainerPort:  8000
              Protocol: tcp
              Name: default
          Memory: 1946  #Hard Limit
          MemoryReservation:  1536  #Soft Limit
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-create-group: true
              awslogs-group:  /ecs/test2node
              awslogs-region: ap-south-1
              awslogs-stream-prefix: ecs
          HealthCheck:
            Command:
              - CMD-SHELL
              - "curl -f http://localhost:8000/health || exit 1"
            Timeout: 5
            Retries: 3
            Interval: 30
  
  ECSService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      CapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Base: 0
          Weight: 1
      TaskDefinition: !Ref TaskDefinition
      ServiceName: test2service
      SchedulingStrategy: REPLICA
      DesiredCount: 1
      LoadBalancers:
        - ContainerName: test2image
          ContainerPort: 8000
          LoadBalancerName: !Ref AWS::NoValue
          TargetGroupArn: !Ref TargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups: !Ref SecurityGroupIDs
          Subnets: !Ref SubnetIDs
      PlatformVersion: LATEST
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
      DeploymentController:
        Type: ECS
      ServiceConnectConfiguration:
        Enabled: false
      Tags: []
      EnableECSManagedTags: true
    DependsOn:
      - Listener
      - TaskDefinition
      - ECSCluster

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      Name: test2alb
      SecurityGroups: !Ref SecurityGroupIDs
      Subnets: !Ref SubnetIDs

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: /
      Name: test2service-tg
      Port: 80
      Protocol: HTTP
      TargetType: ip
      HealthCheckProtocol: HTTP
      VpcId: !Ref VpcID
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '300'

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  AutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: '2'
      MinCapacity: '1'
      ResourceId: service/test1node-cluster/test2service
      RoleARN: arn:aws:iam::XXXXXXXXXXXX:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
    DependsOn:
      - ECSService

  AutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: tets2-policy
      PolicyType: TargetTrackingScaling
      ResourceId: service/test1node-cluster/test2service
      ScalingTargetId: !Ref AutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: '80'
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization

  ApiDNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZone
      Name: api.domain.xyz
      Type: CNAME
      TTL: '300'
      ResourceRecords:
        - !GetAtt LoadBalancer.DNSName
    DependsOn:
      - LoadBalancer

Outputs:
  ECSCluster:
    Description: The created cluster.
    Value: !Ref ECSCluster
  TaskDefinitionArn:
    Value: !Ref TaskDefinition
    Description: ARN of the created task definition
  ClusterName:
    Description: The cluster used to create the service.
    Value: !Ref ECSClusterName
  ECSService:
    Description: The created service.
    Value: !Ref ECSService
  LoadBalancer:
    Description: The created load balancer.
    Value: !Ref LoadBalancer
  Listener:
    Description: The created listener.
    Value: !Ref Listener
  TargetGroup:
    Description: The created target group.
    Value: !Ref TargetGroup
  AutoScalingTarget:
    Value: !Ref AutoScalingTarget
  AutoScalingPolicy:
    Value: !Ref AutoScalingPolicy
