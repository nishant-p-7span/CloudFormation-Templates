AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template for creating CodeDeploy resources and CodePipeline

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
  GitHubToken:
    Type: String
    Description: "GitHub personal access token with repo access"

Resources:
  MySecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: MySecurityGroup
      VpcId: !Ref VpcId #security Group created in our selected vpc.
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  MyInstance1:
    Type: 'AWS::EC2::Instance'
    Properties:
      AvailabilityZone: ap-south-1a
      ImageId: ami-03bb6d83c60fc5f7c
      InstanceType: t2.micro
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 8
      SecurityGroupIds:
        - !GetAtt MySecurityGroup.GroupId
      IamInstanceProfile:
        !Ref Ec2InstanceProfile
      UserData:
        Fn::Base64: |
          #!/bin/bash
          sudo apt update -y
          sudo apt install -y git htop wget
          wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
          [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
          nvm install --lts

          npm i -g pm2
          sudo ln -s "$(which node)" /sbin/node
          sudo ln -s "$(which npm)" /sbin/npm
          sudo ln -s "$(which pm2)" /sbin/pm2
          sudo pm2 startup
          sudo apt install -y ruby-full
          wget https://aws-codedeploy-ap-south-1.s3.ap-south-1.amazonaws.com/latest/install
          chmod +x ./install
          sudo ./install auto
          sudo service codedeploy-agent start
      Tags:
        - Key:  Name
          Value:  instance1

  Ec2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref Ec2CodeDeployRole
      
  CodeDeployPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: Ec2CodeDeploy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "s3:GetObject"
              - "s3:GetObjectVersion"
              - "s3:ListBucket"
            Resource: "*"
      Roles:
        - !Ref Ec2CodeDeployRole

  Ec2CodeDeployRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"


  CodeDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: test-node

  CodeDeployDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref CodeDeployApplication
      DeploymentGroupName: demo
      ServiceRoleArn: 'arn:aws:iam::730335613125:role/CodeDeploy-Role'
      DeploymentConfigName: CodeDeployDefault.OneAtATime
      Ec2TagFilters:
        - Type: KEY_AND_VALUE
          Key:  aws:cloudformation:logical-id
          Value:  MyInstance1
      DeploymentStyle:
        DeploymentType: IN_PLACE
        DeploymentOption: WITHOUT_TRAFFIC_CONTROL


  TestPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Type: S3
        Location: "codepipeline-ap-south-1-108455693432"
      Name: testpipeline
      RoleArn: 'arn:aws:iam::730335613125:role/service-role/AWSCodePipelineServiceRole-ap-south-1-node-demo'
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: '1'
                Provider: GitHub
              Configuration:
                Owner: nishant-p-7span
                Repo: test-node
                Branch: main
                OAuthToken: !Ref GitHubToken
              OutputArtifacts:
                - Name: SourceOutput
              RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: DeployAction
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: '1'
                Provider: CodeDeploy
              Configuration:
                ApplicationName: !Ref CodeDeployApplication
                DeploymentGroupName: !Ref CodeDeployDeploymentGroup
              InputArtifacts:
                - Name: SourceOutput
              RunOrder: 1
